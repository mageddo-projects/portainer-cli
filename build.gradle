import java.nio.file.Paths

buildscript {
	repositories {
		mavenLocal()
	}
}
plugins {
	id "java"
	id "application"
	id "com.palantir.graal" version "0.3.0-2-g6c49b4d"
	id "com.mageddo.graal-reflection-configuration-generator" version "2.0.2"
	id 'net.researchgate.release' version '2.7.0'
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def className = "com.mageddo.portainer.cli.Application"

mainClassName = className

task debug(type: JavaExec){
	debug = true
	classpath = sourceSets.main.runtimeClasspath
	main = className
}

graal {
	mainClass className
	graalVersion(graalVMVersion)
	outputName(project.name)
	downloadBaseUrl("https://github.com/oracle/graal/releases/download/vm-19.1.1/graalvm-ce-linux-amd64-19.1.1.tar.gz#")
	option("-H:IncludeResources=.*.yml|.*.properties|cacerts")
	option("--allow-incomplete-classpath")
	option("-H:ReflectionConfigurationFiles=${project.buildDir}/reflect.json")
	option("-H:+AllowVMInspection")
	option("-H:+ReportUnsupportedElementsAtRuntime")
	option("-H:EnableURLProtocols=https")
	option("-H:+AddAllCharsets")
	option("-H:+ReportExceptionStackTraces")
	option("--initialize-at-build-time=com.mageddo.common.graalvm.NopLogHandler")
	option("--no-server")
	option("-J-Xms1G")
	option("-J-Xmx3G")
	option("-Dfile.encoding=UTF-8")
}

dependencies {

	compile group: 'com.beust', name: 'jcommander', version: '1.72'
	compile group: 'com.mageddo.portainer', name: 'portainer-client', version: '2.2.0'
	compile(group: 'com.mageddo', name: 'commons', version: '1.5.0')

	compile('com.mageddo:rsl:1.0.0')
	annotationProcessor('com.mageddo:rsl-compiler:1.0.1')
	testAnnotationProcessor('com.mageddo:rsl-compiler:1.0.1')

//	tag::graal[]
	compile ("com.mageddo:graal-reflection-configuration:2.0.0")
	compileOnly("com.oracle.substratevm:svm:${graalVMVersion}")
	compileOnly("org.graalvm.sdk:graal-sdk:${graalVMVersion}")
	//end::graal[]

	testCompile group: 'org.jboss.resteasy', name: 'resteasy-undertow', version: '3.6.2.Final'
	testCompile "junit:junit:4.12"

}

release {
	project.ext.set("release.useAutomaticVersion", true)
	git {
		requireBranch = ''
	}
	failOnCommitNeeded = false
	failOnPublishNeeded = false
	failOnUnversionedFiles = false
	buildTasks = []
}


task copyStatics() {
	doLast {

		def binFilePath = "${project.buildDir}/graal/"
		def distPath = Paths.get("${buildDir}/distributions/")

		/**
		 * Create a distribution file
		 */
		ant.zip(destfile: "${distPath}/${project.name}-linux-adm64-${project.version}.zip"){
			zipfileset("dir": binFilePath)
		}
	}
}

nativeImage.dependsOn(tasks.reflectConfigFiles)
nativeImage.finalizedBy(tasks.copyStatics)
